use std::collections::{HashMap, HashSet};
use std::ops::Index;
use std::str::FromStr;

fn main() {
    {
        let mut world: Grid = INPUT.parse().unwrap();
        world.light(Direction::West, (0, 0));

        println!("Part 1: {}", world.energized_count());
    }
    {
        let mut world: Grid = INPUT.parse().unwrap();

        let height = world.height();
        let width = world.width();

        let max_energized = (0..width).map(|x| {
            (Direction::North, (x, 0))
        }).chain(
            (0..height).map(|y| {
                (Direction::East, (width-1, y))
            })
        ).chain(
            (0..width).map(|x| {
                (Direction::South, (x, height-1))
            })
        ).chain(
            (0..height).map(|y| {
                (Direction::West, (0, y))
            })
        ).map(|(dir, pos)| {
            let mut w = world.clone();
            w.light(dir, pos);
            w.energized_count()
        }).max().unwrap();

        println!("Part 2: {}", max_energized);
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
enum Tile {
    Empty,
    Mirror,
    BackMirror,
    VSplit,
    HSplit,
}

impl TryFrom<char> for Tile {
    type Error = anyhow::Error;

    fn try_from(ch: char) -> Result<Self, Self::Error> {
        match ch {
            '.' => Ok(Tile::Empty),
            '/' => Ok(Tile::Mirror),
            '\\' => Ok(Tile::BackMirror),
            '|' => Ok(Tile::VSplit),
            '-' => Ok(Tile::HSplit),
            _ => Err(anyhow::anyhow!("Unknown tile: {}", ch)),
        }
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
enum Direction {
    North,
    East,
    South,
    West,
}

impl std::ops::Add<(usize, usize)> for Direction {
    type Output = Option<(usize, usize)>;

    fn add(self, rhs: (usize, usize)) -> Self::Output {
        match self {
            Direction::North => {
                Some((rhs.0, rhs.1 + 1))
            }
            Direction::East => {
                if rhs.0 > 0 {
                    Some((rhs.0 - 1, rhs.1))
                } else {
                    None
                }
            }
            Direction::South => {
                if rhs.1 > 0 {
                    Some((rhs.0, rhs.1 - 1))
                } else {
                    None
                }
            }
            Direction::West => {
                Some((rhs.0 + 1, rhs.1))
            }
        }
    }
}

#[derive(Clone)]
struct Grid {
    tiles: Vec<Vec<Tile>>,
    lights: HashMap<(usize, usize), HashSet<Direction>>,
}

impl FromStr for Grid {
    type Err = anyhow::Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let tiles = s.lines()
            .map(|line| line.chars()
                .map(|ch| ch.try_into().unwrap())
                .collect())
            .collect();
        Ok(Grid { tiles, lights: HashMap::new() })
    }
}

impl Index<(usize, usize)> for Grid {
    type Output = Tile;

    fn index(&self, index: (usize, usize)) -> &Self::Output {
        self.get(index).unwrap()
    }
}

impl Grid {
    fn height(&self) -> usize {
        self.tiles.len()
    }

    fn width(&self) -> usize {
        self.tiles[0].len()
    }

    fn get(&self, index: (usize, usize)) -> Option<&Tile> {
        let (col, row) = index;
        if let Some(row_tiles) = &self.tiles.get(row) {
            if let Some(tile) = row_tiles.get(col) {
                Some(tile)
            } else {
                None
            }
        } else {
            None
        }
    }

    fn light(&mut self, from: Direction, pos: (usize, usize)) {
        let already_lit = self.lights.entry(pos).or_insert(HashSet::new());
        if already_lit.insert(from) {
            // light on this spot from a new direction. Continues the beams.
            let tile = self[pos];
            match tile {
                Tile::Empty => {
                    self.maybe_light(from, self.valid_pos(from + pos));
                }
                Tile::Mirror => {
                    let new_dir = match from {
                        Direction::North => {
                            Direction::East
                        }
                        Direction::East => {
                            Direction::North
                        }
                        Direction::South => {
                            Direction::West
                        }
                        Direction::West => {
                            Direction::South
                        }
                    };
                    self.maybe_light(new_dir, self.valid_pos(new_dir + pos));
                }
                Tile::BackMirror => {
                    let new_dir = match from {
                        Direction::North => {
                            Direction::West
                        }
                        Direction::West => {
                            Direction::North
                        }
                        Direction::South => {
                            Direction::East
                        }
                        Direction::East => {
                            Direction::South
                        }
                    };
                    self.maybe_light(new_dir, self.valid_pos(new_dir + pos));

                }
                Tile::VSplit => {
                    match from {
                        Direction::North | Direction::South => {
                            self.maybe_light(from, self.valid_pos(from + pos));
                        }
                        Direction::East | Direction::West => {
                            self.maybe_light(Direction::North, self.valid_pos(Direction::North + pos));
                            self.maybe_light(Direction::South, self.valid_pos(Direction::South + pos));
                        }
                    }
                }
                Tile::HSplit => {
                    match from {
                        Direction::East | Direction::West => {
                            self.maybe_light(from, self.valid_pos(from + pos));
                        }
                        Direction::North | Direction::South => {
                            self.maybe_light(Direction::East, self.valid_pos(Direction::East + pos));
                            self.maybe_light(Direction::West, self.valid_pos(Direction::West + pos));
                        }
                    }
                }
            }
        }
    }

    fn maybe_light(&mut self, from: Direction, pos: Option<(usize, usize)>) {
        if let Some(pos) = pos {
            self.light(from, pos);
        }
    }

    fn valid_pos(&self, pos: Option<(usize, usize)>) -> Option<(usize, usize)> {
        if let Some(inner) = pos {
            if let Some(_) = self.get(inner) {
                pos
            } else {
                None
            }
        } else {
            None
        }
    }

    fn energized_count(&self) -> usize {
        self.lights.values().filter(|dirs| !dirs.is_empty()).count()
    }
}

const TEST: &str = r".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....
";

const INPUT: &str = r"\................\......-.........................../..............|.\..-.................-......../..........
..\................\...........|.|../......\......../../...........|.......\....../.......\....../............
|......|./......../..........|\.......|/..|...............................|...............|...................
...................\.-.............................../.......\.....\..............././.......\...........|....
................\......................|...|\............../........./...................\......./......./....
-......\/..\/../...............................................\....\........\...............-....\......-....
....\......-......................-..|...........................-.|...-..........\................./.........
.......|..........\....|/................................/........................-/.\...-/................../
..\...-..../......................\./..........|-/......\...............|...|.............................|...
\................................\....|...........|......................|..........|.............../........-
|..../......\.....\................../............../..\.....|..............................................-.
.\...........\.-....|.....-..|......|..............\.....\...-......./..................../\....|.../\........
...........|.......-..\...............\................................../...........................\........
.........-.................../...................../.-../.........|...\..........-..........\........|........
../...../../.|......-.....|\...../.......\......-.........-............./....................../..............
.-....../.............-...../...........\........-.......\...............-|......\.....|....\.................
......................./..............................\.....\...-................................./...........
./.....\.........\-..-...-..\...................\......./....|.|.-..........|......./.........................
.................................-...............\...../....../..\..-......................|..................
...\.................\...\............\-.....................\...........-..............................-.....
.....-....-|......\..../...........-.................../............-.................../............-....|...
.....-..\.....................-............/..../..........-.../..........................-.......\...........
..|..........................-................|-..-..............|....................../.....|......|........
.\...........................\......//.....-..-............/.....................................././........-
....../...\.......................\/.\.../.........\......................................-.....\......./.....
.....|........../..................................../....-....................|....\........-.........../../.
.............|....\...................................|.....|./..........|...........................-.|......
......................................./........./..................-.......|...............\..../....|.......
.../....//.\...............\.....|..|...-......|.......-|.../.-....-..\........\...../.....|..................
............./...................................|.............../.|...................-..........-...........
...../....|.................................................|........\...........................-....../.|...
...\.....\.....................|/.-....\.....|.|...--...../...\......................../.........|............
../...................../|................/......\...|..\|............-../........-............./......./.....
...............|...................\-.................\......-/.|......./.......-....../........../....-......
.-/-.....|...|......../...\.|........-....................\..-.......-.............................|.-/.\.....
................-......|.....\...--................./....-..|.../............./.....\........../.........|....
.................\...\...........|........................\...............././........|\......./.............-
......\....\..................................././...|..|...............-.....||..............................
..../|.\-............./././....../-./.-..........-...............-..\...........|................../..........
..........\.-....|....\.|...............\.......\.........\./.....|...|........|.........-.................|-.
.|.\......................\......-....-....-...............\.....-.\............./|-...-./....../.......-.....
.........\......../.|.-.../.-...............-..-.......|......\...\..|..................................../...
/./.......|.\.....................................-...-.|......-/...........-..................../.........\..
...-..\........-................\...|.|....../...............|................................................
.....................................-......\...-.../..\....|..................\.........................-....
-........|...........-...........|//................|.....-..........|..-....../\..|../..-....\..\....../.....
.|............../.\...................................\..|....|..\..............|................/...-.../-...
........./.......|.|.................................|\....\|........\........|........|.....................\
..\....../....|......../.......\|.............\........................./............/..../...............-...
.....-........-............/../....-...............-.../......../../..-...........\.....\.......-...-.......-.
........|...../-....-......\.............................-..|\.....\.....\-..............\.......|............
......................................../.......-..\..........\.............|....-.....\/........./.|.....|...
..............-...................-.-...-............../...../.....\./........./.-....................-.......
................|........../\..../......................-.......-............\.|..|......../.........\-.......
........|.........\..........................................-....||..-..\.................-....../..-.......\
.....\.............../..\./.........\|.\.....-|..-..|...../.............../.........-.........................
...|......................//......./..........-...................\......|...../......................|..|....
....\..................|..............\........\........../..-.......-...-|...\../...../........-........./...
...|\.|.......\...........\.-.................|.........\/-...............//.......\................-./......|
.........................-/...-./........./.\.|.......\...\.........\....................\.....-....-.........
......\..\....../.\........./..........-......./.-.............................\\.............................
....................../......\|../....................-.................../..............-..\|.../............
...........\.......|.|.......................|.....................\../........../.-.........|................
...................../.||..........-..../.....-.................|\............................................
..\...\.....-./..........|......-...../.....................................................|................\
....................-.\............|../..............|..\\...........|.....|....-../..........-.....-.........
............................./...............-.........................\...\.|...\.............|...-...|......
.............|.............................|...................|...................\.................../...../
...\.....\.....................-............................/..........|....|..\...........|.|................
........./.......-.\./........................../...........................................|../....../|..\...
....../.........................\...../..-...\................/...-........\....../../......|.................
......./.-.../..-..........|......................................-....\-/.-...........|....-..\...........-..
.....-...........||\...|.......|.................\........../-.............../................-...............
|.-.............\............\.....-|...././..................................-|........-/..........-.....|...
\...................\........./.\...|..........\.|......-....-.-.........\...............|.../-.........\.....
.........../...........|.........|........................|.......................|..-.......................|
..|..................-......-..................-..............................\\............-....|............
..........|..........\......................................\...................-..................|..........
...../.........|.......................................\..././...|\................/...................|......
........\.|....................\\......|..............................\....../.-/...\.......................-.
...........\.............|....\..|......../.....././|..../........\.....|.................\.........|...-.....
.....................\......./\......|............../...........-..........\..................\\...........\..
................................................\.../.....................-...../\|............\-.............
...........\...............-........\................\................./...|....\.....................\...../.
......\........|.....-....................\../..............-...............-..............-..................
.....-............|....................\......\..|.....././...../\.....|...\...............................-.-
........././......-.-..../....|..|../..................../...-......................-.......................|.
.................................//....|............-........../.../.......................\......-...........
................../................|...................................\......./...-............./............
..|.............../.....-................-..|-.........../.....................\/.........\.../.........|.....
.........................../|.../....-..\-...../................./..........................|...............\.
.....|.........../..\........../......./........-..............|............|......................-..........
....|......................................-..|.-../........................-..............\.........-........
.-......-....................-.................././.........................-...|-......................|.....
...-......./........../...........................-........\.........|......-...........-.-...................
..........-.|.|.....\..-..-...\-..../.................|..|..-.......\..................|...|.......-..........
\...........-|....-..........................\................................|.......|...\.......\-........./
./........./-.-............\...-\.-.......................................\-.......................\..........
........|..........\\.....\.-.../............-................|.............-.-..-.....\.......-.....\-.......
...................\.......|...../.-...............\.../......../................../............\...|.........
..\..........|........-.-.......|...../..../....-...........|............|................\/../.........../...
...............\..|./............................................................/............/...............
..\........|/.|......|.............\.............\.....................|.....\..........|......|..............
.............-......|......|\....................\...|..........\\.........|.|....../..../..........\.......\.
../..|..................-................................................//........|..../-..-/..../.\.........
..\............./..........-..|......./-............../....|...............|.....................|.....--\....
....-|.\..|....|............./..........\-.......|........|....|..-................................-./..\\...\
....|..\.......................\......./.-............................||....-...................\......./.....
.|-.......................-...........|..........\.../.......\......\....................-\./.................
...................................................|.....................|....................................
";
